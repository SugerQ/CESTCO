apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion versions.compileSdkVersion
    defaultConfig {
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$versions.support"
    testImplementation "junit:junit:$versions.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$versions.runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espressoVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Rxjava
    api "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin"
    api "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
    //okhttp && retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofitVersion"
    api "com.squareup.okhttp3:okhttp:$versions.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okHttpVersion"
    api "org.jetbrains.anko:anko-commons:$versions.ankoVersion"
    //RxLifecycle
    api "com.trello.rxlifecycle2:rxlifecycle-kotlin:$versions.rxLifecycleVersion"
    //If you want pre-written Activities and Fragments you can subclass as providers
    api "com.trello.rxlifecycle2:rxlifecycle-components:$versions.rxLifecycleVersion"

}
